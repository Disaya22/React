1. JSX
JSX stands for JavaScript XML.

JSX allows us to write HTML in React.

JSX makes it easier to write and add HTML in React.


2. Coding JSX
JSX allows us to write HTML elements in JavaScript and place them in the DOM without any createElement()  and/or appendChild() methods.

JSX converts HTML tags into react elements.

You are not required to use JSX, 
but JSX makes it easier to write React applications.


3. Expressions in JSX
With JSX you can write expressions inside curly braces { }.

The expression can be a React variable, or property, 
or any other valid JavaScript expression. 
JSX will execute the expression and return the result:

file index.js
import React from 'react';
import ReactDOM from 'react-dom/client';

const myElement = <h1>React is {5 + 5} times better with JSX</h1>;

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(myElement);

4. Inserting a Large Block of HTML
To write HTML on multiple lines, put the HTML inside parentheses:

file index.js
import React from 'react';
import ReactDOM from 'react-dom/client';

const myElement = (
  <ul>
    <li>Apples</li>
    <li>Bananas</li>
    <li>Cherries</li>
  </ul>
);

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(myElement);


5. One Top Level Element
The HTML code must be wrapped in ONE top level element.

So if you like to write two paragraphs, 
you must put them inside a parent element, 
like a div element.

const myElement = (
  <div>
    <p>I am a paragraph.</p>
    <p>I am a paragraph too.</p>
  </div>
);

***JSX will throw an error if the HTML is not correct, 
or if the HTML misses a parent element.

Alternatively, you can use a "fragment" to wrap multiple lines. 
This will prevent unnecessarily adding extra nodes to the DOM.

A fragment looks like an empty HTML tag: <></>.

const myElement = (
  <>
    <p>I am a paragraph.</p>
    <p>I am a paragraph too.</p>
  </>
);

6. Elements must be closed
JSX follows XML rules, and therefore 
HTML elements must be properly closed.

**JSX will throw an error if the HTML is not properly closed.

Close empty elements with />

file index.js
import React from 'react';
import ReactDOM from 'react-dom/client';

const myElement = <input type="text" />;

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(myElement);


7. Attribute class = className
The class attribute is a much used attribute in HTML, 
but since JSX is rendered as JavaScript, 
and the class keyword is a reserved word in JavaScript, 
you are not allowed to use it in JSX.

**Use attribute className instead.

JSX solved this by using className instead. 
When JSX is rendered, it translates className attributes 
into class attributes.

file index.js
import React from 'react';
import ReactDOM from 'react-dom/client';

const myElement = <h1 className="myclass">Hello World</h1>;

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(myElement);


8. Conditions - if statements
React supports if statements, but not inside JSX.

To be able to use conditional statementsin JSX, 
you should put the if statements outside of the JSX, 
or you could use a ternary expression instead:

8.1 Write if statements outside of the JSX code:

Write "Hello" if x is less than 10, otherwise "Goodbye":
file index.js
import React from 'react';
import ReactDOM from 'react-dom/client';

const x = 5;
let text = "Goodbye";
if (x < 10) {
  text = "Hello";
}

const myElement = <h1>{text}</h1>;

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(myElement);

8.2 Use ternary expressions instead:

Write "Hello" if x is less than 10, otherwise "Goodbye":
file index.js

const x = 5;

const myElement = <h1>{(x) < 10 ? "Hello" : "Goodbye"}</h1>;

**Note that in order to embed a JavaScript expression inside JSX, 
the JavaScript must be wrapped with curly braces, {}.